name: Release

env:
  PYTHON_VERSION: "3.11"

on:
  push:
    branches: ["main"]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v5.1.1
        id: setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          check-latest: true

      # - name: Upgrade pip
        # run: |
          # pip install --constraint=.github/workflows/constraints.txt pip
          # pip --version
#
      # - name: Install Poetry
        # run: |
          # pip install --constraint=.github/workflows/constraints.txt poetry
          # poetry --version
#
      # - name: Install Nox
        # run: |
          # pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          # pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry rich
          # nox --version

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: poetry version --short

      - name: Bump version for developmental release
        if: "! steps.check-version.outputs.tag"
        run: |
          poetry version patch &&
          version=$(poetry version | awk '{ print $2 }') &&
          poetry version $version.dev.$(date +%s)

      # - name: Build package
        # run: |
          # nox --force-color --session=babel-compile --force-python="${{ steps.setup-python.outputs.python-path }}"
          # poetry build --ansi

      - name: Publish package on PyPI
        if: steps.check-version.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.9.0
        with:
          user: __token__
          password: "${{ secrets.PYPI_TOKEN }}"

      - name: Publish package on TestPyPI
        if: "! steps.check-version.outputs.tag"
        uses: pypa/gh-action-pypi-publish@v1.9.0
        with:
          user: __token__
          password: "${{ secrets.TEST_PYPI_TOKEN }}"
          repository_url: https://test.pypi.org/legacy/

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.0.0
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: "${{ steps.check-version.outputs.tag }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
